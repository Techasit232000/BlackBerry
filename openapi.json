{
  "openapi": "3.0.1",
  "info": {
    "title": "Cylance Multi-Tenant API",
    "description": "This page contains documentation for accessing the Cylance Multi-Tenant Console through API calls.",
    "version": "2.0.0",
    "x-logo": "https://admin.cylance.com/developer/content/en/images/Cylance_Shield_RGBgrn.png"
  },
  "servers": [
    {
      "url": "https://api-admin.cylance.com/public"
    }
  ],
  "paths": {
    "/v2/{region}/users/{userId}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update user",
        "description": "Updates a user",
        "operationId": "users",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The GUID user id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "The JSON body - see UserUpdateModel definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "description": "Deletes a user",
        "operationId": "users2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The GUID user id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/health-check": {
      "get": {
        "tags": [
          "health-check"
        ],
        "summary": "Gets the current health check status",
        "description": "Use this endpoint to validate that the API is currently in a healthy state.",
        "operationId": "health-check",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/tenant-app/{venueTenantId}": {
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "V2 - Returns a JWT bearer token that will authorize requests for PROTECT Web API V2",
        "description": "V2 -Returns a JWT bearer token that can be used for authorization to manage a tenant via the PROTECT Web API V2 directly. In MTC Settings/Application the application being used must have Tenant API Management with the MANAGE privilege enabled",
        "operationId": "tenant-app",
        "parameters": [
          {
            "name": "venueTenantId",
            "in": "path",
            "required": true,
            "description": "The Guid tenant ID of the tenant in CylancePROTECT to manage",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpiTokenDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/policy": {
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Apply a policy template to tenants",
        "description": "Applies a policy template to a group of tenants. Max of 50 tenants can be in the request.",
        "operationId": "policy",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "The JSON body - AssignPolicyTemplateExternalRequestModel. This object will contain the policy template id and an array of venue tenant ids to apply the policy template to",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPolicyTemplateExternalRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/auth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Generate an API token",
        "description": "Uses Basic Authorization. Accepts a base64 encoded App ID and Secret, sent as `Basic {base64Hash}`",
        "operationId": "auth",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Application ID and Application Secret as a base64 Hash.  Sent as Basic Authentication.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialsTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/policy-templates/{policyTemplateId}": {
      "get": {
        "tags": [
          "policy-templates"
        ],
        "summary": "Get a policy template by ID",
        "description": "Returns an individual policy template based on the specified ID.",
        "operationId": "policy-templates",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyTemplateId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the policy template to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplateExternalDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "policy-templates"
        ],
        "summary": "Update an individual policy template based on the specified ID",
        "description": "'Overwrite the specified policy template with new values, as provided in the request body. Note that all policy template properties must exist on the provided value, or the request will fail.\nFor detailed information on `ModelDetails` please reference the **Cylance User API Guide v2.0** [here](https://support.cylance.com/s/article/CylancePROTECT-User-API-Guide).\nThe schema for the `ModelDetails` field is listed in the description.'\n",
        "operationId": "policy-templates2",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyTemplateId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the policy template to update",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "A valid policy template document in JSON format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyTemplateUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policy-templates"
        ],
        "summary": "Permanently delete a policy template",
        "description": "Delete a policy template. Note that this action is **permanent and cannot be undone.**",
        "operationId": "policy-templates3",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyTemplateId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the policy template to delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/reports/report-runs": {
      "get": {
        "tags": [
          "reports"
        ],
        "summary": "List report runs",
        "description": "Get a list of report runs, based on the specified criteria that have run in the last 30 days",
        "operationId": "report-runs",
        "parameters": [
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The accepted sort directions are 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "This will be the current page number (starting with 0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "The accepted filter operators for string type filter columns are 'contains', 'doesNotContain', 'endsWith', 'isEqual', 'startsWith'.  The accepted filter operations for numeric or date type filter columns are 'isEqual', 'isNotEqual', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual'. The accepted filter operations for guid type columns (userId, tenantId, etc) are 'isEqual', 'isNotEqual'\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterColumn",
            "in": "query",
            "description": "The name of the column to filter by (see columns in the ReportRunExternalDetailsListModel definition)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "The value of the filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "The name of the column to sort by (see columns in the ReportRunExternalDetailsListModel definition)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportRunExternalDetailsListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/{tenantId}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get a tenant by ID",
        "description": "Returns data for a tenant based on ID. The Status field in the response can contain the following values \"Active\", \"Pending\", \"ProvisionError\", \"PendingShutdown\", \"Shutdown\". When status is 'ProvisionError', the 'errorCode' will either be 5xx or 4xx based on reason for tenant provisioning failure and 'errorMsg' will include additional details for the failure. If provisioning error was due to a 5xx error code, then you can use 'provision/retry' API to retry the tenant provisioning. If provisioning error was due to a 4xx error code, then you can use 'provision/retry-full' API to retry the tenant provisioning after correcting the field value(s) as indicated by error message",
        "operationId": "tenants",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the tenant to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDetailWithLicenseAndUsageCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Update a tenant by ID",
        "description": "Updates a tenant with the specified details, based on the tenant's ID.",
        "operationId": "tenants2",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the tenant to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "ExternalEditTenantModel Enum Values  `licenseType`: \"Evaluation\", \"Customer\"       `enabledFeatures.id`: Available feature ids are listed below. Int value must be passed in \n  \"Linux\" = 12,\n  \"Device Control\" = 26,\n  \"Auto-Delete for Quarantined Files\" = 32,\n  \"Data Privacy\" = 33,\n  \"Optics V2\" = 34,\n  \"API V2\" = 39,\n  \"Read Only User Role\" = 40,\n  \"Script Control Global Safelist by Hash\" = 42,\n  \"Ubuntu\" = 48 (Can only be enabled when \"Linux\" is enabled),\n  \"Notification for Quarantine Events\" = 49,\n  \"Optics ML\" = 51 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Optics Refract Package\" = 53 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Optics Refract Playbook\" = 56 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Amazon Linux\" = 57 (Can only be enabled when \"Linux\" is enabled),\n  \"Gateway\" = 9997,\n  \"Avert\" = 9998.\n The persona license entitlement and usage fields are deprecated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalEditTenantModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/reports/list": {
      "get": {
        "tags": [
          "reports"
        ],
        "summary": "Get a list of reports",
        "description": "Returns a list of all reports, based on the specified criteria.",
        "operationId": "list",
        "parameters": [
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The accepted sort directions are 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "This will be the page number requested (starting with 0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "The accepted filter operators for string type filter columns are 'contains', 'doesNotContain', 'endsWith', 'isEqual', 'startsWith'.  The accepted filter operations for numeric or date type filter columns are 'isEqual', 'isNotEqual', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual'. The accepted filter operations for guid type columns (userId, tenantId, etc) are 'isEqual', 'isNotEqual'\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterColumn",
            "in": "query",
            "description": "The name of the column to filter by (see columns in the ReportsListModels definition)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "The value of the filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "The name of the column to sort by (see columns in the ReportsListModels definition)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportsListModels"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/reports/{reportId}/run": {
      "post": {
        "tags": [
          "reports"
        ],
        "summary": "Enqueue a report to be processed",
        "description": "This will send enqueue a report to be generated on demand",
        "operationId": "run",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the report to be run",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/policy-templates": {
      "post": {
        "tags": [
          "policy-templates"
        ],
        "summary": "Create a new policy template",
        "description": "'Create a new policy template based on the properties specified in the request body. Note that all policy template properties must exist on the provided value, or the request will fail.\nFor detailed information on `ModelDetails` please reference the **Cylance User API Guide v2.0** [here](https://support.cylance.com/s/article/CylancePROTECT-User-API-Guide).\nThe schema for the `ModelDetails` field is listed in the description.`'\n",
        "operationId": "policy-templates4",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "A valid policy template document in JSON format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyTemplateCreateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplateExternalDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/reports/report-runs/{reportRunId}/download": {
      "get": {
        "tags": [
          "reports"
        ],
        "summary": "Download a report",
        "description": "Get a report as a download",
        "operationId": "download",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportRunId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the report run to retrieve the corresponding report",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/users/{userId}/resend-invite": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Resend user invitation",
        "description": "This endpoint will send a user an invite email",
        "operationId": "resend-invite",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The GUID user id of the user to get the invite",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Empty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/{tenantId}/install-token": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get a tenant's install token",
        "description": "Returns the install token for the specified tenant.",
        "operationId": "install-token",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the tenant whose install token to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Regenerate the install token",
        "description": "Regenerating the Installation Token will **produce a new token** and **irreversibly invalidate** the old token, preventing any new CylancePROTECT Agents from connecting with the old token. \nRegenerating the Installation Token will prevent any CylancePROTECT Agents from connecting to CylancePROTECT until the old token is replaced with the newly generated one.\n",
        "operationId": "install-token2",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Guid ID of the tenant whose install token to refresh",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/users/list": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List users",
        "description": "Get a list of users",
        "operationId": "list2",
        "parameters": [
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The accepted sort directions are 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "This will be the current page number (starting with 0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "The accepted filter operators for string type filter columns are 'contains', 'doesNotContain', 'endsWith', 'isEqual', 'startsWith'.  The accepted filter operations for numeric or date type filter columns are 'isEqual', 'isNotEqual', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual'. The accepted filter operations for guid type columns (userId, tenantId, etc) are 'isEqual', 'isNotEqual'\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterColumn",
            "in": "query",
            "description": "The name of the column to filter by (see columns in the UserListModel definition)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "The value of the filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "The name of the column to sort by (see columns in the UserListModel definition)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Adds a new user",
        "operationId": "users3",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "The JSON body - UserCreateModel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/provision/retry": {
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Retry provisioning a tenant",
        "description": "Use this API to retry previously failed tenant provisioning due to 5xx error code. You can use the 'GET a tenant by ID' API to find out the error code for tenant provisioning",
        "operationId": "retry",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "TenantProvisionRetryModel with Id = the MTC tenant id of the tenant to retry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantProvisionRetryModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDetailWithLicenseAndUsageCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/list": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get a list of tenants",
        "description": "Returns a list of tenants, based on the specified criteria. The Status field in the response can contain the following values \"Active\", \"Pending\", \"ProvisionError\", \"PendingShutdown\", \"Shutdown\". Max 200 records can be returned.",
        "operationId": "list3",
        "parameters": [
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The accepted sort directions are 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Maximum value is 200",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "This will be the current page number (starting with 0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "The accepted filter operators for string type filter columns are 'contains', 'doesNotContain', 'endsWith', 'isEqual', 'startsWith'.  The accepted filter operations for numeric or date type filter columns are 'isEqual', 'isNotEqual', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual'. The accepted filter operations for guid type columns (userId, tenantId, etc) are 'isEqual', 'isNotEqual'\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterColumn",
            "in": "query",
            "description": "The name of the column to filter by (see columns in the TenantListModels definition)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "The value of the filter. If filterColumn = TenantStatus the accepted filterQuery values are 'Active', 'Pending Shutdown', or 'Shutdown'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "The name of the column to sort by (see columns in the TenantListModels definition)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantListModels"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/provision/retry-full": {
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Retry provisioning a tenant with full parameters",
        "description": "If a tenant has been created but encounters an error during the provisioning process and the tenant's TenantStatus = ProvisionError this endpoint can be used to retry the provisioning process by providing the Tenant Id and other fields in the request. The Status field in the response can contain the following values \"Active\", \"Pending\", \"ProvisionError\", \"PendingShutdown\", \"Shutdown\". Use this API to retry previously failed tenant provisioning due to 4xx error code. You can use the 'GET a tenant by ID' API to find out the error code for tenant provisioning",
        "operationId": "retry-full",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "TenantProvisionRetryFullModel Enum Values `term`: \"Monthly\", \"Annual\" `licenseType`: \"Evaluation\", \"Customer\" `featureIds`: Available features listed below. Int value must be passed in array\n  \"Linux\" = 12,\n  \"Device Control\" = 26,\n  \"Auto-Delete for Quarantined Files\" = 32,\n  \"Data Privacy\" = 33,\n  \"Optics V2\" = 34,\n  \"API V2\" = 39,\n  \"Read Only User Role\" = 40,\n  \"Script Control Global Safelist by Hash\" = 42,\n  \"Ubuntu\" = 48 (Can only be enabled when \"Linux\" is enabled),\n  \"Notification for Quarantine Events\" = 49,\n  \"Optics ML\" = 51 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Optics Refract Package\" = 53 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Optics Refract Playbook\" = 56 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Amazon Linux\" = 57 (Can only be enabled when \"Linux\" is enabled),\n  \"Gateway\" = 9997,\n  \"Avert\" = 9998.\n  The persona license entitlement and usage fields are deprecated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantProvisionRetryFullModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDetailWithLicenseAndUsageCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/policy-templates/list": {
      "get": {
        "tags": [
          "policy-templates"
        ],
        "summary": "Get a list of policy templates",
        "description": "Returns a list of all available policy templates, based on the specified criteria. A maximum of 200 policy templates will be returned per request. Default Sort Column: `CreatedDateTime`.",
        "operationId": "list4",
        "parameters": [
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The accepted sort directions are 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Maximum value is 200",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "This will be the page number requested (starting with 0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "The accepted filter operators for string type filter columns are 'contains', 'doesNotContain', 'endsWith', 'isEqual', 'startsWith'.  The accepted filter operations for numeric or date type filter columns are 'isEqual', 'isNotEqual', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual'. The accepted filter operations for guid type columns (userId, tenantId, etc) are 'isEqual', 'isNotEqual'\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterColumn",
            "in": "query",
            "description": "The name of the column to filter by (see columns in the PolicyTemplatesListModel definition)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "The value of the filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "The name of the column to sort by (see columns in the PolicyTemplatesListModel definition)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplatesListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{region}/tenants/provision": {
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Create a new tenant",
        "description": "Adds a new tenant with the provided details. The process to provision a tenant is handled asynchronously and can take 60 or more seconds to complete. The api response is returned while the process is still working and will temporarily contain an empty guid for venueTenantId. All items in the enabledFeatures array will have their enabled value set to false temporarily. Fields ending with 'LicenseUsage' will be null as no usage yet exists. A request can be made to the 'Get a tenant by ID' endpoint and once the provisioning process has completed the venueTenantId in the response will contain the valid guid and the enabledFeatures will return the valid enabled value. The Status field in the response can contain the following values \"Active\", \"Pending\", \"ProvisionError\", \"PendingShutdown\", \"Shutdown\"",
        "operationId": "provision",
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "description": "Two character region code specification for MTC for United States (us), Asia Pacific SE/Austrailia (au), European Union (eu), Asia Pacific NE/Japan (jp), South America/Sao Paulo (sp), and Gov Cloud (gc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`access_token` retrieved using the /auth endpoint.  Sent as a bearer token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "body",
          "description": "TenantProvisionAddModel Enum Values `term`: \"Monthly\", \"Annual\" `licenseType`: \"Evaluation\", \"Customer\" `featureIds`: Available features listed below. Int value must be passed in array\n  \"Linux\" = 12,\n  \"Device Control\" = 26,\n  \"Auto-Delete for Quarantined Files\" = 32,\n  \"Data Privacy\" = 33,\n  \"Optics V2\" = 34,\n  \"API V2\" = 39,\n  \"Read Only User Role\" = 40,\n  \"Script Control Global Safelist by Hash\" = 42,\n  \"Ubuntu\" = 48 (Can only be enabled when \"Linux\" is enabled),\n  \"Notification for Quarantine Events\" = 49,\n  \"Optics ML\" = 51 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Optics Refract Package\" = 53 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Optics Refract Playbook\" = 56 (Can only be enabled when \"Optics V2\" is enabled),\n  \"Amazon Linux\" = 57 (Can only be enabled when \"Linux\" is enabled),\n  \"Gateway\" = 9997,\n  \"Avert\" = 9998.\n  The persona license entitlement and usage fields are deprecated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantProvisionAddModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDetailWithLicenseAndUsageCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "410": {
            "description": "Gone\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupportable Media Type\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "418": {
            "description": "418 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "423": {
            "description": "Locked\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "426": {
            "description": "Upgrade Required\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "431": {
            "description": "Request Header Fields Too Large\nError will be included in response message.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PolicyTemplateUpdateModel": {
        "title": "PolicyTemplateUpdateModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "partnerId",
          "policyTemplateId"
        ],
        "properties": {
          "modelDetails": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string",
            "format": "guid"
          },
          "policyTemplateId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "TenantProvisionAddModel": {
        "title": "TenantProvisionAddModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "protectLicensesAllocated"
        ],
        "properties": {
          "country": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "gatewayLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "address1": {
            "type": "string"
          },
          "featureIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "protectLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "personaLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "customDomain": {
            "type": "string"
          },
          "licenseType": {
            "type": "string"
          },
          "opticsLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "term": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AssignPolicyTemplateExternalRequestModel": {
        "title": "AssignPolicyTemplateExternalRequestModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "policyTemplateId"
        ],
        "properties": {
          "venueTenantIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "policyTemplateId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "TenantListModelsListDataItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "createdDateTime",
          "id"
        ],
        "properties": {
          "licenseType": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "partner": {
            "$ref": "#/components/schemas/TenantListModelsListDataItemPartner"
          },
          "createdBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "term": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "guid"
          },
          "venueTenantId": {
            "type": "string",
            "format": "guid"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "TenantListModels": {
        "title": "TenantListModels",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "totalCount"
        ],
        "properties": {
          "listData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantListModelsListDataItem"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TenantListModelsListDataItemPartner": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "PolicyTemplatesListModel": {
        "title": "PolicyTemplatesListModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "totalCount"
        ],
        "properties": {
          "listData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTemplatesListModelListDataItem"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TenantDetailWithLicenseAndUsageCount": {
        "title": "TenantDetailWithLicenseAndUsageCount",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "createdDateTime",
          "tenantId",
          "venueTenantId"
        ],
        "properties": {
          "country": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "servicePendingRemoval": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "licenseType": {
            "type": "string"
          },
          "opticsLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "tenantName": {
            "type": "string"
          },
          "installationToken": {
            "type": "string"
          },
          "personaLicenseUsage": {
            "type": "integer",
            "format": "int32"
          },
          "gatewayLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "term": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "protectMobileLicenseUsage": {
            "type": "integer",
            "format": "int32"
          },
          "protectLicenseUsage": {
            "type": "integer",
            "format": "int32"
          },
          "opticsLicenseUsage": {
            "type": "integer",
            "format": "int32"
          },
          "phase": {
            "type": "string"
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantDetailWithLicenseAndUsageCountEnabledFeaturesItem"
            }
          },
          "updatedBy": {
            "type": "string"
          },
          "partnerName": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "personaLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "gatewayLicenseUsage": {
            "type": "integer",
            "format": "int32"
          },
          "customDomain": {
            "type": "string"
          },
          "protectLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "errorMsg": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "guid"
          },
          "partnerId": {
            "type": "string",
            "format": "guid"
          },
          "venueTenantId": {
            "type": "string",
            "format": "guid"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ClientCredentialsTokenRequest": {
        "title": "ClientCredentialsTokenRequest",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "grant_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "PolicyTemplatesListModelListDataItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "createdDateTime",
          "id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "Empty": {
        "title": "Empty Schema",
        "type": "object"
      },
      "PolicyTemplateExternalDetailsModel": {
        "title": "PolicyTemplateExternalDetailsModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "createdDate",
          "id"
        ],
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modelDetails": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "PolicyTemplateCreateModel": {
        "title": "PolicyTemplateCreateModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "partnerId"
        ],
        "properties": {
          "modelDetails": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "UserListModelListDataItemPartner": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "VpiTokenDetail": {
        "title": "VpiTokenDetail",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "expiresIn"
        ],
        "properties": {
          "expiresIn": {
            "type": "integer",
            "format": "int32"
          },
          "accessToken": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          }
        }
      },
      "UserListModelListDataItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "createdDateTime",
          "userId"
        ],
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "lastLoginDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "partner": {
            "$ref": "#/components/schemas/UserListModelListDataItemPartner"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "format": "guid"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "ReportsListModels": {
        "title": "ReportsListModels",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "totalCount"
        ],
        "properties": {
          "listData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportsListModelsListDataItem"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TenantDetailWithLicenseAndUsageCountEnabledFeaturesItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled",
          "id",
          "pending"
        ],
        "properties": {
          "removalDate": {
            "type": "string"
          },
          "pending": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "transitionDate": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ExternalEditTenantModelEnabledFeaturesItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled",
          "id",
          "pending"
        ],
        "properties": {
          "removalDate": {
            "type": "string"
          },
          "pending": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "transitionDate": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ReportRunExternalDetailsListModel": {
        "title": "ReportRunExternalDetailsListModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "totalCount"
        ],
        "properties": {
          "listData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportRunExternalDetailsListModelListDataItem"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserCreateModel": {
        "title": "UserCreateModel",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "roleNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Error": {
        "title": "Error Schema",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "UserCreateResponseModel": {
        "title": "UserCreateResponseModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "TenantProvisionRetryModel": {
        "title": "TenantProvisionRetryModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "UserUpdateModel": {
        "title": "UserUpdateModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId"
        ],
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "format": "guid"
          },
          "roleNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          }
        }
      },
      "TenantProvisionRetryFullModel": {
        "title": "TenantProvisionRetryFullModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "protectLicensesAllocated"
        ],
        "properties": {
          "country": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "gatewayLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "personaMobileLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "address1": {
            "type": "string"
          },
          "featureIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "protectLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "dlpLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mtdLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "personaLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "customDomain": {
            "type": "string"
          },
          "isDeletable": {
            "type": "boolean"
          },
          "licenseType": {
            "type": "string"
          },
          "opticsLicensesAllocated": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "term": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "guid"
          },
          "state": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReportRunExternalDetailsListModelListDataItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "partnerId",
          "reportRunId",
          "resultCount",
          "runDate"
        ],
        "properties": {
          "reportType": {
            "type": "string"
          },
          "runDate": {
            "type": "string",
            "format": "date-time"
          },
          "resultCount": {
            "type": "integer",
            "format": "int32"
          },
          "reportName": {
            "type": "string"
          },
          "reportRunId": {
            "type": "string",
            "format": "guid"
          },
          "fileKey": {
            "type": "string"
          },
          "partnerId": {
            "type": "string",
            "format": "guid"
          },
          "fileType": {
            "type": "string"
          },
          "runBy": {
            "type": "string"
          }
        }
      },
      "TokenResponse": {
        "title": "TokenResponse",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "expiresIn"
        ],
        "properties": {
          "expiresIn": {
            "type": "integer",
            "format": "int32"
          },
          "identityToken": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "ExternalEditTenantModel": {
        "title": "ExternalEditTenantModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "protectLicenseCount",
          "tenantId"
        ],
        "properties": {
          "country": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalEditTenantModelEnabledFeaturesItem"
            }
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "personaLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "customDomain": {
            "type": "string"
          },
          "protectLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "licenseType": {
            "type": "string"
          },
          "opticsLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "tenantName": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "guid"
          },
          "gatewayLicenseCount": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "UserListModel": {
        "title": "UserListModel",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "totalCount"
        ],
        "properties": {
          "listData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserListModelListDataItem"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportsListModelsListDataItem": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "reportType": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "modifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Operations for generating API access tokens."
    },
    {
      "name": "health-check",
      "description": "Operations for returning the health check status of the API."
    },
    {
      "name": "policy-templates",
      "description": "Operations for returning policy templates."
    },
    {
      "name": "reports",
      "description": "Operations for returning report data"
    },
    {
      "name": "tenants",
      "description": "Operations for returning tenant data"
    },
    {
      "name": "users",
      "description": "Operations for managing user data"
    }
  ]
}